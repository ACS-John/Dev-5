syoption base 0
dim bl$*1200000
dim b64$*1200000
dim line$*1200000
pr program$&' not intended to be run directly.'
end
def library fnEncodeBase64(&content$)
	gosub Constants
	if trim$(content$)<>'' then
		encode=1
		line$=content$
		lineLen=Len(line$)
		for I=1 to lineLen
			bl$=bl$&bt$(Ord(line$(I:I)))
		next I
		lineLen=Len(bl$): nullcount=Mod(lineLen,3)
		if Nullcount=2 then lineLen+=16
		if Nullcount=1 then lineLen+=8
		bl$=Rpad$(bl$,lineLen,'0')
		lineLen=Len(bl$)
		d=Int(lineLen/6): e=D*6
		b64=0: for I=1 to E step 6
			f$=bl$(I:I+5)
			if F$(1:1)='1' then b64+=32
			if F$(2:2)='1' then b64+=16
			if F$(3:3)='1' then b64+=8
			if F$(4:4)='1' then b64+=4
			if F$(5:5)='1' then b64+=2
			if F$(6:6)='1' then b64+=1
			b64$=b64$&b64t$(b64) : b64=0
		next I
		lineLen=Len(b64$)
		if Nullcount=2 then 
			b64$=b64$(1:lineLen-2)&'=='
		else if Nullcount=1 then 
			b64$=b64$(1:lineLen-1)&'='
		end if
	end if
	content$=b64$
fnend
def library fnDecodeBase64(&content$)
	if trim$(content$)<>'' then
		dim id(1200000)
		decode=1
		gosub Constants
		line$=content$
		lineLen=Len(line$)
		for I=1 to lineLen
			for Q=0 to 63
					if line$(I:I)=b64t$(Q) then id(I)=Q
			next Q
		next I
		for I=1 to lineLen
			sav=id(I)
			if Sav<32 then bt$='0'  else sav=Sav-32 : bt$='1'
			if Sav<16 then bt$&='0' else sav=Sav-16: bt$&='1'
			if Sav<8  then bt$&='0' else sav=Sav-8 : bt$&='1'
			if Sav<4  then bt$&='0' else sav=Sav-4 : bt$&='1'
			if Sav<2  then bt$&='0' else sav=Sav-2 : bt$&='1'
			if Sav<1  then bt$&='0' else sav=Sav-1 : bt$&='1'
			if Sav<>0 then pr 'Problem' : pause
			bl$=bl$&bt$
		next I
		lineLen=Len(bl$)
		d=Int(lineLen/8): e=D*8
		line$='' : for I=1 to E step 8
			for Q=0 to 255
					f$=bl$(I:I+7)
					if F$=bt$(Q) then line$=line$&Chr$(Q) : q=255
			next Q
		next I
		lineLen=Len(line$)
		if line$(lineLen-1:lineLen)=Chr$(0)&Chr$(0) then line$=line$(1:lineLen-2)
		if line$(lineLen:lineLen)=Chr$(0) then line$=line$(1:lineLen-1)
	end if
	content$=Trim$(line$)
fnend
Constants: ! r: 
	dim bt$(255)*8 !  Binary Table
	bt$(0  )='00000000'
	bt$(1  )='00000001'
	bt$(2  )='00000010'
	bt$(3  )='00000011'
	bt$(4  )='00000100'
	bt$(5  )='00000101'
	bt$(6  )='00000110'
	bt$(7  )='00000111'
	bt$(8  )='00001000'
	bt$(9  )='00001001'
	bt$(10 )='00001010'
	bt$(11 )='00001011'
	bt$(12 )='00001100'
	bt$(13 )='00001101'
	bt$(14 )='00001110'
	bt$(15 )='00001111'
	bt$(16 )='00010000'
	bt$(17 )='00010001'
	bt$(18 )='00010010'
	bt$(19 )='00010011'
	bt$(20 )='00010100'
	bt$(21 )='00010101'
	bt$(22 )='00010110'
	bt$(23 )='00010111'
	bt$(24 )='00011000'
	bt$(25 )='00011001'
	bt$(26 )='00011010'
	bt$(27 )='00011011'
	bt$(28 )='00011100'
	bt$(29 )='00011101'
	bt$(30 )='00011110'
	bt$(31 )='00011111'
	bt$(32 )='00100000'
	bt$(33 )='00100001'
	bt$(34 )='00100010'
	bt$(35 )='00100011'
	bt$(36 )='00100100'
	bt$(37 )='00100101'
	bt$(38 )='00100110'
	bt$(39 )='00100111'
	bt$(40 )='00101000'
	bt$(41 )='00101001'
	bt$(42 )='00101010'
	bt$(43 )='00101011'
	bt$(44 )='00101100'
	bt$(45 )='00101101'
	bt$(46 )='00101110'
	bt$(47 )='00101111'
	bt$(48 )='00110000'
	bt$(49 )='00110001'
	bt$(50 )='00110010'
	bt$(51 )='00110011'
	bt$(52 )='00110100'
	bt$(53 )='00110101'
	bt$(54 )='00110110'
	bt$(55 )='00110111'
	bt$(56 )='00111000'
	bt$(57 )='00111001'
	bt$(58 )='00111010'
	bt$(59 )='00111011'
	bt$(60 )='00111100'
	bt$(61 )='00111101'
	bt$(62 )='00111110'
	bt$(63 )='00111111'
	bt$(64 )='01000000'
	bt$(65 )='01000001'
	bt$(66 )='01000010'
	bt$(67 )='01000011'
	bt$(68 )='01000100'
	bt$(69 )='01000101'
	bt$(70 )='01000110'
	bt$(71 )='01000111'
	bt$(72 )='01001000'
	bt$(73 )='01001001'
	bt$(74 )='01001010'
	bt$(75 )='01001011'
	bt$(76 )='01001100'
	bt$(77 )='01001101'
	bt$(78 )='01001110'
	bt$(79 )='01001111'
	bt$(80 )='01010000'
	bt$(81 )='01010001'
	bt$(82 )='01010010'
	bt$(83 )='01010011'
	bt$(84 )='01010100'
	bt$(85 )='01010101'
	bt$(86 )='01010110'
	bt$(87 )='01010111'
	bt$(88 )='01011000'
	bt$(89 )='01011001'
	bt$(90 )='01011010'
	bt$(91 )='01011011'
	bt$(92 )='01011100'
	bt$(93 )='01011101'
	bt$(94 )='01011110'
	bt$(95 )='01011111'
	bt$(96 )='01100000'
	bt$(97 )='01100001'
	bt$(98 )='01100010'
	bt$(99 )='01100011'
	bt$(100)='01100100'
	bt$(101)='01100101'
	bt$(102)='01100110'
	bt$(103)='01100111'
	bt$(104)='01101000'
	bt$(105)='01101001'
	bt$(106)='01101010'
	bt$(107)='01101011'
	bt$(108)='01101100'
	bt$(109)='01101101'
	bt$(110)='01101110'
	bt$(111)='01101111'
	bt$(112)='01110000'
	bt$(113)='01110001'
	bt$(114)='01110010'
	bt$(115)='01110011'
	bt$(116)='01110100'
	bt$(117)='01110101'
	bt$(118)='01110110'
	bt$(119)='01110111'
	bt$(120)='01111000'
	bt$(121)='01111001'
	bt$(122)='01111010'
	bt$(123)='01111011'
	bt$(124)='01111100'
	bt$(125)='01111101'
	bt$(126)='01111110'
	bt$(127)='01111111'
	bt$(128)='10000000'
	bt$(129)='10000001'
	bt$(130)='10000010'
	bt$(131)='10000011'
	bt$(132)='10000100'
	bt$(133)='10000101'
	bt$(134)='10000110'
	bt$(135)='10000111'
	bt$(136)='10001000'
	bt$(137)='10001001'
	bt$(138)='10001010'
	bt$(139)='10001011'
	bt$(140)='10001100'
	bt$(141)='10001101'
	bt$(142)='10001110'
	bt$(143)='10001111'
	bt$(144)='10010000'
	bt$(145)='10010001'
	bt$(146)='10010010'
	bt$(147)='10010011'
	bt$(148)='10010100'
	bt$(149)='10010101'
	bt$(150)='10010110'
	bt$(151)='10010111'
	bt$(152)='10011000'
	bt$(153)='10011001'
	bt$(154)='10011010'
	bt$(155)='10011011'
	bt$(156)='10011100'
	bt$(157)='10011101'
	bt$(158)='10011110'
	bt$(159)='10011111'
	bt$(160)='10100000'
	bt$(161)='10100001'
	bt$(162)='10100010'
	bt$(163)='10100011'
	bt$(164)='10100100'
	bt$(165)='10100101'
	bt$(166)='10100110'
	bt$(167)='10100111'
	bt$(168)='10101000'
	bt$(169)='10101001'
	bt$(170)='10101010'
	bt$(171)='10101011'
	bt$(172)='10101100'
	bt$(173)='10101101'
	bt$(174)='10101110'
	bt$(175)='10101111'
	bt$(176)='10110000'
	bt$(177)='10110001'
	bt$(178)='10110010'
	bt$(179)='10110011'
	bt$(180)='10110100'
	bt$(181)='10110101'
	bt$(182)='10110110'
	bt$(183)='10110111'
	bt$(184)='10111000'
	bt$(185)='10111001'
	bt$(186)='10111010'
	bt$(187)='10111011'
	bt$(188)='10111100'
	bt$(189)='10111101'
	bt$(190)='10111110'
	bt$(191)='10111111'
	bt$(192)='11000000'
	bt$(193)='11000001'
	bt$(194)='11000010'
	bt$(195)='11000011'
	bt$(196)='11000100'
	bt$(197)='11000101'
	bt$(198)='11000110'
	bt$(199)='11000111'
	bt$(200)='11001000'
	bt$(201)='11001001'
	bt$(202)='11001010'
	bt$(203)='11001011'
	bt$(204)='11001100'
	bt$(205)='11001101'
	bt$(206)='11001110'
	bt$(207)='11001111'
	bt$(208)='11010000'
	bt$(209)='11010001'
	bt$(210)='11010010'
	bt$(211)='11010011'
	bt$(212)='11010100'
	bt$(213)='11010101'
	bt$(214)='11010110'
	bt$(215)='11010111'
	bt$(216)='11011000'
	bt$(217)='11011001'
	bt$(218)='11011010'
	bt$(219)='11011011'
	bt$(220)='11011100'
	bt$(221)='11011101'
	bt$(222)='11011110'
	bt$(223)='11011111'
	bt$(224)='11100000'
	bt$(225)='11100001'
	bt$(226)='11100010'
	bt$(227)='11100011'
	bt$(228)='11100100'
	bt$(229)='11100101'
	bt$(230)='11100110'
	bt$(231)='11100111'
	bt$(232)='11101000'
	bt$(233)='11101001'
	bt$(234)='11101010'
	bt$(235)='11101011'
	bt$(236)='11101100'
	bt$(237)='11101101'
	bt$(238)='11101110'
	bt$(239)='11101111'
	bt$(240)='11110000'
	bt$(241)='11110001'
	bt$(242)='11110010'
	bt$(243)='11110011'
	bt$(244)='11110100'
	bt$(245)='11110101'
	bt$(246)='11110110'
	bt$(247)='11110111'
	bt$(248)='11111000'
	bt$(249)='11111001'
	bt$(250)='11111010'
	bt$(251)='11111011'
	bt$(252)='11111100'
	bt$(253)='11111101'
	bt$(254)='11111110'
	bt$(255)='11111111'

	dim b64t$(63)*1
	b64t$(0 )='A'
	b64t$(1 )='B'
	b64t$(2 )='C'
	b64t$(3 )='D'
	b64t$(4 )='E'
	b64t$(5 )='F'
	b64t$(6 )='G'
	b64t$(7 )='H'
	b64t$(8 )='I'
	b64t$(9 )='J'
	b64t$(10)='K'
	b64t$(11)='L'
	b64t$(12)='M'
	b64t$(13)='N'
	b64t$(14)='O'
	b64t$(15)='P'
	b64t$(16)='Q'
	b64t$(17)='R'
	b64t$(18)='S'
	b64t$(19)='T'
	b64t$(20)='U'
	b64t$(21)='V'
	b64t$(22)='W'
	b64t$(23)='X'
	b64t$(24)='Y'
	b64t$(25)='Z'
	b64t$(26)='a'
	b64t$(27)='b'
	b64t$(28)='c'
	b64t$(29)='d'
	b64t$(30)='e'
	b64t$(31)='f'
	b64t$(32)='g'
	b64t$(33)='h'
	b64t$(34)='i'
	b64t$(35)='j'
	b64t$(36)='k'
	b64t$(37)='l'
	b64t$(38)='m'
	b64t$(39)='n'
	b64t$(40)='o'
	b64t$(41)='p'
	b64t$(42)='q'
	b64t$(43)='r'
	b64t$(44)='s'
	b64t$(45)='t'
	b64t$(46)='u'
	b64t$(47)='v'
	b64t$(48)='w'
	b64t$(49)='x'
	b64t$(50)='y'
	b64t$(51)='z'
	b64t$(52)='0'
	b64t$(53)='1'
	b64t$(54)='2'
	b64t$(55)='3'
	b64t$(56)='4'
	b64t$(57)='5'
	b64t$(58)='6'
	b64t$(59)='7'
	b64t$(60)='8'
	b64t$(61)='9'
	b64t$(62)='+'
	b64t$(63)='/'
return ! /r


